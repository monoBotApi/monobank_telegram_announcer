import os
import requests
import time

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
MONOBANK_TOKEN = os.environ.get('MONOBANK_TOKEN')

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID or not MONOBANK_TOKEN:
    raise RuntimeError("Missing required environment variables: TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, MONOBANK_TOKEN")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—á—ë—Ç–∞ (–∫–∞—Ä—Ç—ã) ===


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á 'accounts'
def get_account_id():
    headers = {"X-Token": MONOBANK_TOKEN}
    try:
        response = requests.get(
            "https://api.monobank.ua/personal/client-info",
            headers=headers,
            timeout=10,
        )
        response.raise_for_status()
        data = response.json()
    except Exception as error:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ Monobank:", error)
        return None

    if "accounts" not in data or not data["accounts"]:
        print("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á 'accounts' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç. –û—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return None

    return data["accounts"][0]["id"]
# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def send_to_telegram(message: str) -> None:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
    except Exception as error:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:", error)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def run_monitoring():
    account_id = get_account_id()
    if not account_id:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ
        time.sleep(30)
        account_id = get_account_id()
        if not account_id:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—á—ë—Ç–∞ Monobank. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.")

    last_txn_time = 0
    last_txn_id = None

    while True:
        try:
            url = f"https://api.monobank.ua/personal/statement/{account_id}/{last_txn_time}"
            headers = {"X-Token": MONOBANK_TOKEN}
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            data = response.json()

            if isinstance(data, list) and data:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏ –ø–æ id –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏) –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                data.sort(key=lambda t: (t.get("time", 0), str(t.get("id", ""))))

                for txn in data:
                    txn_time = txn.get("time", 0)
                    txn_id = txn.get("id")

                    should_process = (
                        txn_time > last_txn_time or
                        (txn_time == last_txn_time and txn_id is not None and txn_id != last_txn_id)
                    )

                    if should_process:
                        amount = txn.get("amount", 0) / 100
                        description = txn.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        message = f"üí∏ {description}\n–°—É–º–º–∞: {amount} –≥—Ä–Ω"
                        send_to_telegram(message)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
                        last_txn_time = txn_time
                        last_txn_id = txn_id

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ Monobank:", e)

        time.sleep(60)

if __name__ == '__main__':
    run_monitoring()

